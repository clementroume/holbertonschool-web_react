/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/*!********************!*\
  !*** ./js/main.ts ***!
  \********************/

/**
 * =================================================================
 * PART 1: Interfaces for Teachers and Directors
 * =================================================================
 */
/**
 * A function that takes a first name and a last name, and returns a formatted string.
 * @param firstName - The teacher's first name.
 * @param lastName - The teacher's last name.
 * @returns The first letter of the first name, followed by a dot and the full last name (e.g., "J. Doe").
 */
var printTeacher = function (firstName, lastName) {
    return "".concat(firstName.charAt(0), ". ").concat(lastName);
};
/**
 * A class representing a student.
 * It implements the IStudentClass interface to guarantee its structure.
 */
var StudentClass = /** @class */ (function () {
    function StudentClass(firstName, lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
    StudentClass.prototype.workOnHomework = function () {
        return "Currently working";
    };
    StudentClass.prototype.displayName = function () {
        return this.firstName;
    };
    return StudentClass;
}());
/**
 * =================================================================
 * PART 4: Usage Examples
 * =================================================================
 */
console.log("--- Teacher and Director Tests ---");
// Example of a Teacher object
var teacher = {
    firstName: 'John',
    fullTimeEmployee: false,
    lastName: 'Doe',
    location: 'London',
    contract: false, // This additional property is allowed
};
console.log(teacher);
// Example of a Director object
var director = {
    firstName: 'Jane',
    lastName: 'Doe',
    fullTimeEmployee: true,
    location: 'Paris',
    numberOfReports: 17,
};
console.log(director);
console.log("\n--- printTeacher Function Test ---");
console.log(printTeacher("John", "Doe")); // Outputs: J. Doe
console.log("\n--- StudentClass Tests ---");
// A verification line to ensure the StudentClass
// conforms to its constructor interface.
var StudentClassConstructor = StudentClass;
// Creating a new instance
var student = new StudentClassConstructor('Jane', 'Smith');
console.log(student.displayName()); // Outputs: Jane
console.log(student.workOnHomework()); // Outputs: Currently working

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0dBSUc7QUFzQ0g7Ozs7O0dBS0c7QUFDSCxJQUFNLFlBQVksR0FBeUIsVUFBQyxTQUFTLEVBQUUsUUFBUTtJQUM3RCxPQUFPLFVBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsZUFBSyxRQUFRLENBQUUsQ0FBQztBQUMvQyxDQUFDLENBQUM7QUF5QkY7OztHQUdHO0FBQ0g7SUFFRSxzQkFBbUIsU0FBaUIsRUFBUyxRQUFnQjtRQUExQyxjQUFTLEdBQVQsU0FBUyxDQUFRO1FBQVMsYUFBUSxHQUFSLFFBQVEsQ0FBUTtJQUFHLENBQUM7SUFFakUscUNBQWMsR0FBZDtRQUNFLE9BQU8sbUJBQW1CLENBQUM7SUFDN0IsQ0FBQztJQUVELGtDQUFXLEdBQVg7UUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FBQztBQUVEOzs7O0dBSUc7QUFFSCxPQUFPLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7QUFFbEQsOEJBQThCO0FBQzlCLElBQU0sT0FBTyxHQUFZO0lBQ3ZCLFNBQVMsRUFBRSxNQUFNO0lBQ2pCLGdCQUFnQixFQUFFLEtBQUs7SUFDdkIsUUFBUSxFQUFFLEtBQUs7SUFDZixRQUFRLEVBQUUsUUFBUTtJQUNsQixRQUFRLEVBQUUsS0FBSyxFQUFFLHNDQUFzQztDQUN4RCxDQUFDO0FBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUVyQiwrQkFBK0I7QUFDL0IsSUFBTSxRQUFRLEdBQWM7SUFDMUIsU0FBUyxFQUFFLE1BQU07SUFDakIsUUFBUSxFQUFFLEtBQUs7SUFDZixnQkFBZ0IsRUFBRSxJQUFJO0lBQ3RCLFFBQVEsRUFBRSxPQUFPO0lBQ2pCLGVBQWUsRUFBRSxFQUFFO0NBQ3BCLENBQUM7QUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBR3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQjtBQUc1RCxPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFFNUMsaURBQWlEO0FBQ2pELHlDQUF5QztBQUN6QyxJQUFNLHVCQUF1QixHQUE2QixZQUFZLENBQUM7QUFFdkUsMEJBQTBCO0FBQzFCLElBQU0sT0FBTyxHQUFHLElBQUksdUJBQXVCLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBRTdELE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBTSxnQkFBZ0I7QUFDekQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDLDZCQUE2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3R5cGVzY3JpcHRfZGVwZW5kZW5jaWVzLy4vanMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBQQVJUIDE6IEludGVyZmFjZXMgZm9yIFRlYWNoZXJzIGFuZCBEaXJlY3RvcnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIHN0cnVjdHVyZSBvZiBhIFRlYWNoZXIgb2JqZWN0LlxuICogLSBgZmlyc3ROYW1lYCBhbmQgYGxhc3ROYW1lYCBhcmUgcmVhZC1vbmx5IGFmdGVyIGluaXRpYWxpemF0aW9uLlxuICogLSBgeWVhcnNPZkV4cGVyaWVuY2VgIGlzIGFuIG9wdGlvbmFsIHByb3BlcnR5LlxuICogLSBUaGUgaW50ZXJmYWNlIGFsbG93cyBmb3IgYWRkaXRpb25hbCwgdW5kZWZpbmVkIHByb3BlcnRpZXMgKGUuZy4sIGBjb250cmFjdGApLlxuICovXG5pbnRlcmZhY2UgVGVhY2hlciB7XG5cdHJlYWRvbmx5IGZpcnN0TmFtZTogc3RyaW5nO1xuXHRyZWFkb25seSBsYXN0TmFtZTogc3RyaW5nO1xuXHRmdWxsVGltZUVtcGxveWVlOiBib29sZWFuO1xuXHR5ZWFyc09mRXhwZXJpZW5jZT86IG51bWJlcjtcblx0bG9jYXRpb246IHN0cmluZztcbiAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbn1cblxuLyoqXG4gKiBUaGUgRGlyZWN0b3IgaW50ZXJmYWNlIGluaGVyaXRzIGFsbCBwcm9wZXJ0aWVzIGZyb20gVGVhY2hlclxuICogYW5kIGFkZHMgdGhlIGBudW1iZXJPZlJlcG9ydHNgIHByb3BlcnR5LlxuICovXG5pbnRlcmZhY2UgRGlyZWN0b3JzIGV4dGVuZHMgVGVhY2hlciB7XG5cdG51bWJlck9mUmVwb3J0czogbnVtYmVyO1xufVxuXG4vKipcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBQQVJUIDI6IEZ1bmN0aW9ucyBhbmQgdGhlaXIgSW50ZXJmYWNlc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgc2lnbmF0dXJlICh0aGUgXCJzaGFwZVwiKSBvZiB0aGUgcHJpbnRUZWFjaGVyIGZ1bmN0aW9uLlxuICovXG5pbnRlcmZhY2UgcHJpbnRUZWFjaGVyRnVuY3Rpb24ge1xuICAoZmlyc3ROYW1lOiBzdHJpbmcsIGxhc3ROYW1lOiBzdHJpbmcpOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgZmlyc3QgbmFtZSBhbmQgYSBsYXN0IG5hbWUsIGFuZCByZXR1cm5zIGEgZm9ybWF0dGVkIHN0cmluZy5cbiAqIEBwYXJhbSBmaXJzdE5hbWUgLSBUaGUgdGVhY2hlcidzIGZpcnN0IG5hbWUuXG4gKiBAcGFyYW0gbGFzdE5hbWUgLSBUaGUgdGVhY2hlcidzIGxhc3QgbmFtZS5cbiAqIEByZXR1cm5zIFRoZSBmaXJzdCBsZXR0ZXIgb2YgdGhlIGZpcnN0IG5hbWUsIGZvbGxvd2VkIGJ5IGEgZG90IGFuZCB0aGUgZnVsbCBsYXN0IG5hbWUgKGUuZy4sIFwiSi4gRG9lXCIpLlxuICovXG5jb25zdCBwcmludFRlYWNoZXI6IHByaW50VGVhY2hlckZ1bmN0aW9uID0gKGZpcnN0TmFtZSwgbGFzdE5hbWUpID0+IHtcbiAgcmV0dXJuIGAke2ZpcnN0TmFtZS5jaGFyQXQoMCl9LiAke2xhc3ROYW1lfWA7XG59O1xuXG4vKipcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBQQVJUIDM6IFN0dWRlbnQgQ2xhc3MgYW5kIGl0cyBJbnRlcmZhY2VzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciB0aGUgQ09OU1RSVUNUT1Igb2YgdGhlIFN0dWRlbnRDbGFzcy5cbiAqIEl0IGVuc3VyZXMgdGhlIGNsYXNzIGNhbiBiZSBpbnN0YW50aWF0ZWQgd2l0aCBgbmV3YCBhbmQgdGhlIGNvcnJlY3QgYXJndW1lbnRzLlxuICovXG5pbnRlcmZhY2UgSVN0dWRlbnRDbGFzc0NvbnN0cnVjdG9yIHtcbiAgbmV3IChmaXJzdE5hbWU6IHN0cmluZywgbGFzdE5hbWU6IHN0cmluZyk6IElTdHVkZW50Q2xhc3M7XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBhbiBJTlNUQU5DRSBvZiB0aGUgU3R1ZGVudENsYXNzLlxuICogSXQgZGVzY3JpYmVzIHRoZSBwdWJsaWMgcHJvcGVydGllcyBhbmQgbWV0aG9kcyBvZiBhIHN0dWRlbnQgb2JqZWN0LlxuICovXG5pbnRlcmZhY2UgSVN0dWRlbnRDbGFzcyB7XG4gIHdvcmtPbkhvbWV3b3JrKCk6IHN0cmluZztcbiAgZGlzcGxheU5hbWUoKTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50aW5nIGEgc3R1ZGVudC5cbiAqIEl0IGltcGxlbWVudHMgdGhlIElTdHVkZW50Q2xhc3MgaW50ZXJmYWNlIHRvIGd1YXJhbnRlZSBpdHMgc3RydWN0dXJlLlxuICovXG5jbGFzcyBTdHVkZW50Q2xhc3MgaW1wbGVtZW50cyBJU3R1ZGVudENsYXNzIHtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZmlyc3ROYW1lOiBzdHJpbmcsIHB1YmxpYyBsYXN0TmFtZTogc3RyaW5nKSB7fVxuXG4gIHdvcmtPbkhvbWV3b3JrKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiQ3VycmVudGx5IHdvcmtpbmdcIjtcbiAgfVxuXG4gIGRpc3BsYXlOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZmlyc3ROYW1lO1xuICB9XG59XG5cbi8qKlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFBBUlQgNDogVXNhZ2UgRXhhbXBsZXNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuY29uc29sZS5sb2coXCItLS0gVGVhY2hlciBhbmQgRGlyZWN0b3IgVGVzdHMgLS0tXCIpO1xuXG4vLyBFeGFtcGxlIG9mIGEgVGVhY2hlciBvYmplY3RcbmNvbnN0IHRlYWNoZXI6IFRlYWNoZXIgPSB7XG4gIGZpcnN0TmFtZTogJ0pvaG4nLFxuICBmdWxsVGltZUVtcGxveWVlOiBmYWxzZSxcbiAgbGFzdE5hbWU6ICdEb2UnLFxuICBsb2NhdGlvbjogJ0xvbmRvbicsXG4gIGNvbnRyYWN0OiBmYWxzZSwgLy8gVGhpcyBhZGRpdGlvbmFsIHByb3BlcnR5IGlzIGFsbG93ZWRcbn07XG5jb25zb2xlLmxvZyh0ZWFjaGVyKTtcblxuLy8gRXhhbXBsZSBvZiBhIERpcmVjdG9yIG9iamVjdFxuY29uc3QgZGlyZWN0b3I6IERpcmVjdG9ycyA9IHtcbiAgZmlyc3ROYW1lOiAnSmFuZScsXG4gIGxhc3ROYW1lOiAnRG9lJyxcbiAgZnVsbFRpbWVFbXBsb3llZTogdHJ1ZSxcbiAgbG9jYXRpb246ICdQYXJpcycsXG4gIG51bWJlck9mUmVwb3J0czogMTcsXG59O1xuY29uc29sZS5sb2coZGlyZWN0b3IpO1xuXG5cbmNvbnNvbGUubG9nKFwiXFxuLS0tIHByaW50VGVhY2hlciBGdW5jdGlvbiBUZXN0IC0tLVwiKTtcbmNvbnNvbGUubG9nKHByaW50VGVhY2hlcihcIkpvaG5cIiwgXCJEb2VcIikpOyAvLyBPdXRwdXRzOiBKLiBEb2VcblxuXG5jb25zb2xlLmxvZyhcIlxcbi0tLSBTdHVkZW50Q2xhc3MgVGVzdHMgLS0tXCIpO1xuXG4vLyBBIHZlcmlmaWNhdGlvbiBsaW5lIHRvIGVuc3VyZSB0aGUgU3R1ZGVudENsYXNzXG4vLyBjb25mb3JtcyB0byBpdHMgY29uc3RydWN0b3IgaW50ZXJmYWNlLlxuY29uc3QgU3R1ZGVudENsYXNzQ29uc3RydWN0b3I6IElTdHVkZW50Q2xhc3NDb25zdHJ1Y3RvciA9IFN0dWRlbnRDbGFzcztcblxuLy8gQ3JlYXRpbmcgYSBuZXcgaW5zdGFuY2VcbmNvbnN0IHN0dWRlbnQgPSBuZXcgU3R1ZGVudENsYXNzQ29uc3RydWN0b3IoJ0phbmUnLCAnU21pdGgnKTtcblxuY29uc29sZS5sb2coc3R1ZGVudC5kaXNwbGF5TmFtZSgpKTsgICAgICAvLyBPdXRwdXRzOiBKYW5lXG5jb25zb2xlLmxvZyhzdHVkZW50LndvcmtPbkhvbWV3b3JrKCkpOyAvLyBPdXRwdXRzOiBDdXJyZW50bHkgd29ya2luZ1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9